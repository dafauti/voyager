JobArgs{
    StartDate=${?STARTDATE}
    EndDate=${?ENDDATE}
    HiveDbName=${?HIVEDBNAME}
    YearArg=${?YEARARG}
}
inputBaseTable{
    lca_src_dpp="lca_src_dpp"
    lca_src_location_mapping_adhoc="lca_src_location_mapping_adhoc"
    rna_src_location_ing="rona.location"

    rna_src_dpp="rna_src_dpp"
    rna_src_products_ing="rna_src_products_ing"

    lca_src_item_ing="lca_src_item_ing"
}
outputTable{
    rna_lca_combined_dpp="rna_lca_combined_dpp"
    canada_dpp_cal="canada_dpp_cal"
}
query_pipeline{
    steps=[
            {
                step_desc="Create gmail location product temp"
                output_table="gmail_location_product_tmp"
                output_table_type="TEMPORARY" // supports temporary and permanent
                write_format="ORC"
                write_mode="OVERWRITE" // supports OVERWRITE and APPEND
                query="""SELECT
                         'gmail' AS banner,
                         CASE WHEN primary_par_vbu_nbr='' THEN NULL ELSE primary_par_vbu_nbr END primary_par_vbu_nbr,
                         CASE WHEN primary_par_vbu_name='' THEN NULL ELSE primary_par_vbu_name END primary_par_vbu_name,
                         chl_vbu_nbr,
                         chl_vbu_nme AS chl_vbu_name,
                         bus_ara_nbr,
                         bus_ara_des_txt,
                         mer_dvs_nbr,
                         mer_dvs_des_txt,
                         mer_sbo_dvs_nbr,
                         sbo_dvs_des_txt,
                         prd_grp_nbr,
                         prd_grp_des_txt,
                         brn_cd,
                         brand,
                         asr_nbr,
                         asr_des_txt,
                         itm_nbr,
                         itm_des_txt,
                         promo_flag,
                         SUM(term_perc) AS term_perc,
                         SUM(term_days) AS term_days,
                         SUM(pmt_term_eqvlcy) AS pmt_term_eqvlcy,
                         SUM(fil_sal_amt) AS sales,
                         SUM(fil_sal_itm_qty) AS unit,
                         SUM(fil_mrg_amt) AS margin,
                         SUM(dpp) AS dpp,
                         0 AS cogs,
                         SUM(tot_clm_aon_amt) AS tot_clm_aon_amt,
                         SUM(avg_invoice_cost) AS avg_invoice_cost,
                         SUM(fil_cst_amt) AS fulfilled_cost,
                         SUM(mst) AS mst,
                         SUM(rtm_defective_allowance) AS rtm_defective_allowance,
                         SUM(delivery_expense) AS delivery_expense,
                         SUM(delivery_revenue) AS delivery_revenue,
                         SUM(est_frg_amt) AS est_frg_amt,
                         SUM(tot_dc_rcv_aon_amt) AS tot_dc_rcv_aon_amt,
                         SUM(tot_dc_shp_aon_amt) AS tot_dc_shp_aon_amt,
                         SUM(tot_dc_frg_aon_amt) AS tot_dc_frg_aon_amt,
                         SUM(tot_dc_ocp_aon_amt) AS tot_dc_ocp_aon_amt,
                         SUM(ocn_frg_amt) AS ocn_frg_amt,
                         SUM(vlm_reb_amt) AS vlm_reb_amt,
                         SUM(total_transactions) AS total_transactions,
                         SUM(dty_amt) AS dty_amt,
                         SUM(sos_adj) AS sos_adj,
                         SUM(shrink) AS shrink,
                         SUM(cash_discounts) AS cash_discounts,
                         SUM(postage) AS postage,
                         SUM(non_vat_acmc) AS non_vat_acmc,
                         0 AS markup,
                         0 AS markdown,
                         0 AS vat,
                         fiscal_year,
                         fiscal_month,
                         CONCAT('FM ',fiscal_year,', ',fiscal_month) AS fsc_month_year
                         FROM (SELECT * FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.lca_src_dpp}""" WHERE fiscal_year IN """${JobArgs.YearArg}""")
                         GROUP BY
                         primary_par_vbu_nbr,
                         primary_par_vbu_name,
                         chl_vbu_nbr,
                         chl_vbu_nme,
                         bus_ara_nbr,
                         bus_ara_des_txt,
                         mer_dvs_nbr,
                         mer_dvs_des_txt,
                         mer_sbo_dvs_nbr,
                         sbo_dvs_des_txt,
                         prd_grp_nbr,
                         prd_grp_des_txt,
                         brn_cd,
                         brand,
                         asr_nbr,
                         asr_des_txt,
                         itm_nbr,
                         itm_des_txt,
                         promo_flag,
                         fiscal_year,
                         fiscal_month
                         """
            }
            {
                step_desc="Create Rona relation with product"
                output_table="rona_dpp_prep_combined_temp"
                output_table_type="TEMPORARY" // supports temporary and permanent
                write_format="ORC"
                write_mode="OVERWRITE" // supports OVERWRITE and APPEND
                query="""SELECT
                         'RONA/RENO-DEPOT' AS banner,
                         rona.supp_master_idnt AS primary_par_vbu_nbr,
                         rona.supp_master_desc AS primary_par_vbu_name,
                         rona.supp_idnt AS chl_vbu_nbr,
                         rona.supp_desc AS chl_vbu_name,
                         rona.area_id AS bus_ara_nbr,
                         rona.area_name AS bus_ara_des_txt,
                         rona.division_id AS mer_dvs_nbr,
                         rona.division_name AS mer_dvs_des_txt,
                         rona.subdivision_id AS mer_sbo_dvs_nbr,
                         rona.subdivsion_name AS sbo_dvs_des_txt,
                         rona.product_group_id AS prd_grp_nbr,
                         rona.prd_grp_name AS prd_grp_des_txt,
                         0 AS brn_cd,
                         rona.brand,
                         rona.assortment_id AS asr_nbr,
                         rona.assortment_name AS asr_des_txt,
                         rona.rona_code AS itm_nbr,
                         rona.item_name AS itm_des_txt,
                         rona.promo_flag,
                         CAST(product.rona_lw_ntwk_cde AS BIGINT) AS rona_lw_ntwk_cde,
                         SUM(term_perc) AS term_perc,
                         SUM(term_days) AS term_days,
                         SUM(pmt_term_eqvlcy) AS pmt_term_eqvlcy,
                         SUM(sales) AS sales,
                         SUM(quantity) AS unit,
                         SUM(margin) AS margin,
                         SUM(dpp) AS dpp,
                         SUM(cogs) AS cogs,
                         0 AS avg_invoice_cost,
                         SUM(mst) AS mst,
                         0 AS rtm_defective_allowance,
                         SUM(delivery_expense) AS delivery_expense,
                         SUM(delivery_revenue) AS delivery_revenue,
                         0 AS est_frg_amt,
                         0 AS tot_dc_rcv_aon_amt,
                         0 AS tot_dc_shp_aon_amt,
                         0 AS tot_dc_frg_aon_amt,
                         0 AS tot_dc_ocp_aon_amt,
                         0 AS ocn_frg_amt,
                         0 AS vlm_reb_amt,
                         0 AS total_transactions,
                         0 AS dty_amt,
                         0 AS sos_adj,
                         SUM(shrink) AS shrink,
                         SUM(cash_discount_dol) AS cash_discounts,
                         0 AS postage,
                         0 AS non_vat_acmc,
                         SUM(markup) AS markup,
                         SUM(markdown) AS markdown,
                         SUM(vat) AS vat,
                         SUM(pos) AS pos,
                         SUM(web_pos) AS web_pos,
                         SUM(sta) AS sta,
                         SUM(mdf) AS mdf,
                         SUM(national_promo) AS national_promo,
                         SUM(national_web_promo) AS national_web_promo,
                         SUM(lump_sum) AS lump_sum,
                         SUM(monoserra_deal) AS monoserra_deal,
                         SUM(sbd_craftsman_deal) AS sbd_craftsman_deal,
                         SUM(canwel_treatedlumber_deal) AS canwel_treatedlumber_deal,
                         SUM(tcl_deal) AS tcl_deal,
                         fiscal_year,
                         fiscal_month,
                         CONCAT('FM ',fiscal_year,', ',fiscal_month) AS fsc_month_year
                         FROM (SELECT * FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.rna_src_dpp}""" WHERE fiscal_year IN """${JobArgs.YearArg}""") rona
                         LEFT JOIN """${JobArgs.HiveDbName}"""."""${inputBaseTable.rna_src_products_ing}""" product
                         ON rona.item_idnt=product.rona_code
                         GROUP BY
                         rona.supp_master_idnt,
                         rona.supp_master_desc,
                         rona.supp_idnt,
                         rona.supp_desc,
                         rona.area_id,
                         rona.area_name,
                         rona.division_id,
                         rona.division_name,
                         rona.subdivision_id,
                         rona.subdivsion_name,
                         rona.product_group_id,
                         rona.prd_grp_name,
                         rona.brand,
                         rona.assortment_id,
                         rona.assortment_name,
                         rona.rona_code,
                         rona.item_name,
                         rona.promo_flag,
                         CAST(product.rona_lw_ntwk_cde AS BIGINT),
                         fiscal_year,
                         fiscal_month
                         """
            }
            {
                step_desc="Create Rona DPP Product tmp"
                output_table="rona_dpp_product_tmp"
                output_table_type="TEMPORARY" // supports temporary and permanent
                write_format="ORC"
                write_mode="OVERWRITE" // supports OVERWRITE and APPEND
                query="""SELECT
                         banner,
                         CASE WHEN primary_par_vbu_nbr='' THEN NULL ELSE primary_par_vbu_nbr END primary_par_vbu_nbr,
                         CASE WHEN primary_par_vbu_name='' THEN NULL ELSE primary_par_vbu_name END primary_par_vbu_name,
                         chl_vbu_nbr,
                         chl_vbu_name,
                         CASE WHEN product.bus_ara_nbr IS NULL THEN CASE WHEN bus_ara.bus_ara_nbr IS NULL THEN rona_dpp.bus_ara_nbr ELSE bus_ara.bus_ara_nbr END ELSE product.bus_ara_nbr END bus_ara_nbr,
                         CASE WHEN product.bus_ara_des_txt IS NULL THEN CASE WHEN bus_ara.bus_ara_des_txt IS NULL THEN rona_dpp.bus_ara_des_txt ELSE bus_ara.bus_ara_des_txt END ELSE product.bus_ara_des_txt END bus_ara_des_txt,
                         CASE WHEN product.mer_dvs_nbr IS NULL THEN CASE WHEN dvs.mer_dvs_nbr IS NULL THEN rona_dpp.mer_dvs_nbr ELSE dvs.mer_dvs_nbr END ELSE product.mer_dvs_nbr END mer_dvs_nbr,
                         CASE WHEN product.mer_dvs_des_txt IS NULL THEN CASE WHEN dvs.mer_dvs_des_txt IS NULL THEN rona_dpp.mer_dvs_des_txt ELSE dvs.mer_dvs_des_txt END ELSE product.mer_dvs_des_txt END mer_dvs_des_txt,
                         CASE WHEN product.mer_sbo_dvs_nbr IS NULL THEN CASE WHEN sbo_dvs.mer_sbo_dvs_nbr IS NULL THEN rona_dpp.mer_sbo_dvs_nbr ELSE sbo_dvs.mer_sbo_dvs_nbr END ELSE product.mer_sbo_dvs_nbr END mer_sbo_dvs_nbr,
                         CASE WHEN product.sbo_dvs_des_txt IS NULL THEN CASE WHEN sbo_dvs.sbo_dvs_des_txt IS NULL THEN rona_dpp.sbo_dvs_des_txt ELSE sbo_dvs.sbo_dvs_des_txt END ELSE product.sbo_dvs_des_txt END sbo_dvs_des_txt,
                         CASE WHEN product.prd_grp_nbr IS NULL THEN CASE WHEN prd_grp.prd_grp_nbr IS NULL THEN rona_dpp.prd_grp_nbr ELSE prd_grp.prd_grp_nbr END ELSE product.prd_grp_nbr END prd_grp_nbr,
                         CASE WHEN product.prd_grp_des_txt IS NULL THEN CASE WHEN prd_grp.prd_grp_des_txt IS NULL THEN rona_dpp.prd_grp_des_txt ELSE prd_grp.prd_grp_des_txt END ELSE product.prd_grp_des_txt END prd_grp_des_txt,
                         0 as brn_cd,
                         rona_dpp.brand,
                         CASE WHEN product.asr_nbr IS NULL THEN CASE WHEN assortment.asr_nbr IS NULL THEN rona_dpp.asr_nbr ELSE assortment.asr_nbr END ELSE product.asr_nbr END AS asr_nbr,
                         CASE WHEN product.asr_des_txt IS NULL THEN CASE WHEN assortment.asr_des_txt IS NULL THEN rona_dpp.asr_des_txt ELSE assortment.asr_des_txt END ELSE product.asr_des_txt END as asr_des_txt,
                         CASE WHEN product.itm_nbr IS NULL THEN rona_dpp.itm_nbr ELSE product.itm_nbr END AS itm_nbr,
                         CASE WHEN product.itm_des_txt IS NULL THEN rona_dpp.itm_des_txt ELSE product.itm_des_txt END AS itm_des_txt,
                         CASE WHEN promo_flag='Promo' THEN 'Promotion' ELSE promo_flag END AS promo_flag,
                         term_perc,
                         term_days,
                         pmt_term_eqvlcy,
                         sales,
                         unit,
                         margin,
                         dpp,
                         cogs,
                         (COALESCE(mst,0)+COALESCE(pos,0)+COALESCE(web_pos,0)+COALESCE(sta,0)+COALESCE(mdf,0)+COALESCE(national_promo,0)+COALESCE(national_web_promo,0)+COALESCE(lump_sum,0)) as vnd_fud_amt,
                         pos,
                         web_pos,
                         sta,
                         mdf,
                         national_promo,
                         national_web_promo,
                         lump_sum,
                         avg_invoice_cost,
                         mst,
                         rtm_defective_allowance,
                         delivery_expense,
                         delivery_revenue,
                         est_frg_amt,
                         tot_dc_rcv_aon_amt,
                         tot_dc_shp_aon_amt,
                         tot_dc_frg_aon_amt,
                         tot_dc_ocp_aon_amt,
                         ocn_frg_amt,
                         vlm_reb_amt,
                         total_transactions,
                         dty_amt,
                         sos_adj,
                         shrink,
                         cash_discounts,
                         postage,
                         non_vat_acmc,
                         markup,
                         markdown,
                         vat,
                         (COALESCE(cogs,0)+COALESCE(mst,0)+COALESCE(pos,0)+COALESCE(web_pos,0)+COALESCE(sta,0)+COALESCE(mdf,0)+COALESCE(national_promo,0)+COALESCE(national_web_promo,0)+COALESCE(lump_sum,0)+COALESCE(cash_discounts,0)+COALESCE(monoserra_deal,0)+COALESCE(sbd_craftsman_deal,0)+COALESCE(canwel_treatedlumber_deal,0)+COALESCE(tcl_deal,0)) as merch_margin,
                         fiscal_year,
                         fiscal_month,
                         fsc_month_year
                         FROM rona_dpp_prep_combined_temp rona_dpp
                         LEFT OUTER JOIN (SELECT bus_ara_nbr,bus_ara_des_txt,mer_dvs_nbr,mer_dvs_des_txt,mer_sbo_dvs_nbr,sbo_dvs_des_txt,prd_grp_nbr,prd_grp_des_txt,asr_nbr,asr_des_txt,itm_nbr,itm_des_txt FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.lca_src_item_ing}""" GROUP BY bus_ara_nbr,bus_ara_des_txt,mer_dvs_nbr,mer_dvs_des_txt,mer_sbo_dvs_nbr,sbo_dvs_des_txt,prd_grp_nbr,prd_grp_des_txt,asr_nbr,asr_des_txt,itm_nbr,itm_des_txt) product ON rona_dpp.rona_lw_ntwk_cde= product.itm_nbr
                         LEFT OUTER JOIN (SELECT bus_ara_nbr,bus_ara_des_txt FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.lca_src_item_ing}""" GROUP BY bus_ara_nbr,bus_ara_des_txt) bus_ara ON rona_dpp.bus_ara_nbr=bus_ara.bus_ara_nbr
                         LEFT OUTER JOIN (SELECT mer_dvs_nbr,mer_dvs_des_txt FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.lca_src_item_ing}""" GROUP BY mer_dvs_nbr,mer_dvs_des_txt) dvs ON rona_dpp.mer_dvs_nbr=dvs.mer_dvs_nbr
                         LEFT OUTER JOIN (SELECT CAST(prd_grp_nbr AS STRING) AS prd_grp_nbr,prd_grp_des_txt FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.lca_src_item_ing}""" GROUP BY prd_grp_nbr,prd_grp_des_txt) prd_grp ON rona_dpp.prd_grp_nbr=prd_grp.prd_grp_nbr
                         LEFT OUTER JOIN (SELECT CAST(mer_sbo_dvs_nbr AS STRING) AS mer_sbo_dvs_nbr,sbo_dvs_des_txt FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.lca_src_item_ing}""" GROUP BY mer_sbo_dvs_nbr,sbo_dvs_des_txt) sbo_dvs ON rona_dpp.mer_sbo_dvs_nbr=sbo_dvs.mer_sbo_dvs_nbr
                         LEFT OUTER JOIN (SELECT CAST(asr_nbr AS STRING) AS asr_nbr,asr_des_txt FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.lca_src_item_ing}""" GROUP BY asr_nbr,asr_des_txt) assortment ON rona_dpp.asr_nbr=assortment.asr_nbr"""
            }
            {
                step_desc="Populate final Rona gmail Dpp Combined Output"
                output_table=""${JobArgs.HiveDbName}"."${outputTable.rna_lca_combined_dpp}""
                output_table_type="PERMANENT" // supports temporary and permanent
                write_format="ORC"
                write_mode="OVERWRITE" // supports OVERWRITE and APPEND
                query="""SELECT
                             CASE
                             WHEN primary_par_vbu_name IS NULL AND chl_vbu_name IS NULL THEN NULL
                             WHEN primary_par_vbu_name IS NULL THEN chl_vbu_nbr
                             ELSE primary_par_vbu_nbr END as primary_par_vbu_nbr,
                             COALESCE(primary_par_vbu_name,chl_vbu_name,'Vendor not Mapped') AS primary_par_vbu_name,
                             chl_vbu_nbr,
                             chl_vbu_name,
                             bus_ara_nbr,
                             bus_ara_des_txt,
                             mer_dvs_nbr,
                             mer_dvs_des_txt,
                             mer_sbo_dvs_nbr,
                             sbo_dvs_des_txt,
                             prd_grp_nbr,
                             prd_grp_des_txt,
                             brn_cd,
                             brand,
                             asr_nbr,
                             asr_des_txt,
                             itm_nbr,
                             itm_des_txt,
                             promo_flag,
                             term_perc,
                             term_days,
                             pmt_term_eqvlcy,
                             sales,
                             unit,
                             margin,
                             dpp,
                             cogs,
                             0 as fulfilled_cost,
                             vnd_fud_amt,
                             0 as tot_clm_aon_amt,
                             pos,
                             web_pos,
                             sta,
                             mdf,
                             national_promo,
                             national_web_promo,
                             lump_sum,
                             avg_invoice_cost,
                             mst,
                             rtm_defective_allowance,
                             delivery_expense,
                             delivery_revenue,
                             est_frg_amt,
                             tot_dc_rcv_aon_amt,
                             tot_dc_shp_aon_amt,
                             tot_dc_frg_aon_amt,
                             tot_dc_ocp_aon_amt,
                             ocn_frg_amt,
                             vlm_reb_amt,
                             total_transactions,
                             dty_amt,
                             sos_adj,
                             shrink,
                             cash_discounts,
                             postage,
                             non_vat_acmc,
                             markup,
                             markdown,
                             vat,
                             merch_margin,
                             fsc_month_year,
                             banner,
                             fiscal_year,
                             fiscal_month
                             FROM rona_dpp_product_tmp
                             UNION ALL
                             SELECT
                             CASE
                             WHEN primary_par_vbu_name IS NULL AND chl_vbu_name IS NULL THEN NULL
                             WHEN primary_par_vbu_name IS NULL THEN chl_vbu_nbr
                             ELSE primary_par_vbu_nbr END as primary_par_vbu_nbr,
                             COALESCE(primary_par_vbu_name,chl_vbu_name,'Vendor not Mapped') AS primary_par_vbu_name,
                             chl_vbu_nbr,
                             chl_vbu_name,
                             bus_ara_nbr,
                             bus_ara_des_txt,
                             mer_dvs_nbr,
                             mer_dvs_des_txt,
                             CAST(mer_sbo_dvs_nbr AS STRING) AS mer_sbo_dvs_nbr,
                             sbo_dvs_des_txt,
                             CAST(prd_grp_nbr AS STRING) AS prd_grp_nbr,
                             prd_grp_des_txt,
                             brn_cd,
                             brand,
                             CAST(asr_nbr AS STRING) AS asr_nbr,
                             asr_des_txt,
                             CAST(itm_nbr AS STRING) AS itm_nbr,
                             itm_des_txt,
                             promo_flag,
                             term_perc,
                             term_days,
                             pmt_term_eqvlcy,
                             sales,
                             unit,
                             margin,
                             dpp,
                             cogs,
                             fulfilled_cost,
                             (COALESCE(non_vat_acmc,0)-COALESCE(rtm_defective_allowance,0)+COALESCE(mst,0)) AS vnd_fud_amt,
                             tot_clm_aon_amt,
                             0 AS pos,
                             0 AS web_pos,
                             0 AS sta,
                             0 AS mdf,
                             0 AS national_promo,
                             0 AS national_web_promo,
                             0 AS lump_sum,
                             avg_invoice_cost,
                             mst,
                             rtm_defective_allowance,
                             delivery_expense,
                             delivery_revenue,
                             est_frg_amt,
                             tot_dc_rcv_aon_amt,
                             tot_dc_shp_aon_amt,
                             tot_dc_frg_aon_amt,
                             tot_dc_ocp_aon_amt,
                             ocn_frg_amt,
                             vlm_reb_amt,
                             total_transactions,
                             dty_amt,
                             sos_adj,
                             shrink,
                             cash_discounts,
                             postage,
                             non_vat_acmc,
                             markup,
                             markdown,
                             vat,
                             (COALESCE(fulfilled_cost,0)+COALESCE(cash_discounts,0)) AS merch_margin,
                             fsc_month_year,
                             banner,
                             fiscal_year,
                             fiscal_month
                         FROM gmail_location_product_tmp"""
            }
            {
            step_desc="calendar table for microstrategy transformation"
            output_table=""${JobArgs.HiveDbName}"."${outputTable.canada_dpp_cal}""
            output_table_type="PERMANENT"
            write_format="ORC"
            write_mode="OVERWRITE"
            query="""SELECT
            DISTINCT
            CONCAT('FM ',fiscal_year,', ',fiscal_month) AS fsc_month_year,
            CONCAT('FM ',fiscal_year-1,', ',fiscal_month) AS ly_fsc_month_year,
            CASE WHEN fiscal_year IN (YEAR(CURRENT_DATE)-1,YEAR(CURRENT_DATE)-2,YEAR(CURRENT_DATE)) THEN 1 ELSE 0 END AS flag,
            CASE WHEN fiscal_month in (1,2,3,4,5,6,7,8,9) THEN CONCAT('FM ',fiscal_year,', 0',fiscal_month) ELSE CONCAT('FM ',fiscal_year,', ',fiscal_month) END AS fsc_month_year_order,
            CASE WHEN fiscal_month in (1,2,3,4,5,6,7,8,9) THEN CONCAT('FM ',fiscal_year-1,', 0',fiscal_month) ELSE CONCAT('FM ',fiscal_year-1,', ',fiscal_month) END AS ly_fsc_month_year_order
            FROM """${JobArgs.HiveDbName}"""."""${inputBaseTable.lca_src_dpp}
            }
          ]
}
